import uproot
import ROOT
import numpy as np
import gpu_routines
from gpu_routines import get_reco_products
import matplotlib.pyplot as plt
import time
import mapping
from mapping import map_eta_phi


def main():
    #start time
    time_start = time.time()

    file = uproot.open("./17184_0001_raw.root")
    tree = file["h4"]
    waves = tree["xtal_sample"].array(library="np")
    #print(waves.shape) #DEBUG
    
    #mapping eta and phi with channels
    ieta = np.array([])
    iphi = np.array([])
    ieta, iphi = map_eta_phi()
    
    #mask 5x5 matrix around channel 53 with (eta, phi) = (56, 9)
    mask_eta_maj = ieta > 53
    mask_eta_min = ieta < 59
    mask_phi_maj = iphi > 6
    mask_phi_min = iphi < 12
    mask_eta = np.logical_and(mask_eta_maj, mask_eta_min)
    mask_phi = np.logical_and(mask_phi_maj, mask_phi_min)
    mask = np.logical_and(mask_eta, mask_phi)
    #print(f"------- DEBUG -------\n{mask}")
    waves_masked = waves[:, mask, :]
    #print(f"------- DEBUG -------\n{waves_masked.shape}")
    waves_norm = np.mod(waves_masked, 4096)

    #mask for channel 53 with (eta, phi) = (56, 9) 
    mask_eta_53 = ieta == 56
    mask_phi_53 = iphi == 9
    mask_53 = np.logical_and(mask_eta_53, mask_phi_53)
    #print(f"------- DEBUG -------\n{np.argmax(mask_53)}")
    waves_masked_53 = waves[:, mask_53, :]
    #print(f"------- DEBUG -------\n{waves_masked.shape}")
    waves_norm_53 = np.mod(waves_masked_53, 4096)

    #mean and rms of baseline
    nevents, nchannels, nsamples = waves.shape
    bline_samples = 10
    sig_reg_min = 15
    sig_reg_max = 30
    pre_signal = waves_norm[:, :, :bline_samples]
    pre_signal_bline = pre_signal.mean(axis=2)
    pre_signal_rms = pre_signal.std(axis=2)
    #print(f"------- DEBUG -------\n{waves_norm[0, 0, :]}")
    waves_norm = waves_norm - np.repeat(pre_signal_bline[:, :, np.newaxis], nsamples, axis=2)
    #print(f"------- DEBUG -------\n{waves_norm[0, 0, :]}")

    #mask for the max, signal amplitude and baseline rms
    new_sig_idx = np.where(np.where(mask)[0] == np.where(mask_53)[0])[0]
    #print(f"------- DEBUG -------\n{new_sig_idx}")
    mask_max_pos = np.logical_and(np.argmax(waves_norm[:, new_sig_idx, :], axis=2) > sig_reg_min, 
                                  np.argmax(waves_norm[:, new_sig_idx, :], axis=2) < sig_reg_max).squeeze()
    signal = waves_norm[:, new_sig_idx, int(sig_reg_min):int(sig_reg_max)]
    mask_sig_amp = (signal.max(axis=2) > 150).squeeze()
    mask_pos_and_sig = np.logical_and(mask_max_pos, mask_sig_amp)
    waves_norm = waves_norm[mask_pos_and_sig, :, :]
    #print(f"------- DEBUG -------\n{waves_norm.shape}")
    pre_signal_rms_masked = pre_signal_rms[mask_pos_and_sig, :]
    mask_rms_bline = (pre_signal_rms_masked[:, new_sig_idx] < 20).squeeze()
    waves_norm = waves_norm[mask_rms_bline, :, :]
    #print(f"------- DEBUG -------\n{waves_norm.shape}")
    
    #number of selected events
    nevents, nchannels, nsamples = waves_norm.shape
    
    '''
    #plot di tutte le onde del canale 53 una sopra l'altra
    for event_idx in range(waves_norm.shape[0]):
    plt.plot(range(waves_norm.shape[2]), waves_norm[event_idx, new_sig_idx, :].squeeze(), alpha=0.1, color='blue')
    plt.xlabel("sample")
    plt.ylabel("waveform value")
    plt.show()
    plt.savefig("TH1_waveforms_sel.pdf")
    '''
    
    '''
    #TH2 per le onde del canale 53
    y_min = np.min(waves_norm[:, new_sig_idx, :])
    y_max = np.max(waves_norm[:, new_sig_idx, :])
    nybins = 50
    h2 = ROOT.TH2F("h2_waves_all", "", nsamples, 0, nsamples, nybins, y_min, y_max)
    for ev in range(nevents):
        for samp in range(nsamples):
            val = waves_norm[ev, new_sig_idx, samp]
            h2.Fill(samp, val[0])
    c = ROOT.TCanvas("c","c",1000,600)
    h2.SetStats(0)
    h2.Draw("COLZ")
    c.Draw()
    c.SaveAs("TH2_waveforms.pdf")
    outfile = ROOT.TFile("TH2_waveforms.root", "RECREATE")
    h2.Write()
    outfile.Close()
    '''

    #selection of signal window
    pre = 5
    post = 10
    window_size = pre + post
    signal_sel = []
    for ev in range(nevents):
        waveform = waves_norm[ev, new_sig_idx, :]
        pos_max = np.argmax(waveform)
        start = max(pos_max - pre, 0)
        end = min(pos_max + post, nsamples)
        if end - start < window_size:
            if start == 0:
                end = min(window_size, nsamples)
            elif end == nsamples:
                start = max(nsamples - window_size, 0)
        signal_sel.append(waves_norm[ev, :, start:end])
    signal_sel = np.stack(signal_sel)
    #print(f"------- DEBUG -------\n{signal_sel.shape}")

    #TH1 of the 5x5 charge
    charge_thr = 100
    charge = signal_sel.sum(axis=2)
    charge[charge < charge_thr] = 0
    charge_sum = charge.sum(axis=1)
    #print(f"------- DEBUG -------\n{charge_sum.shape}")
    h1 = ROOT.TH1F("h1_charge_sum", "", 10000, 0, 20000)
    for ev in range(charge_sum.shape[0]):
        h1.Fill(charge_sum[ev])
    c1 = ROOT.TCanvas("c1", "", 1000, 600)
    #h1.SetStats(0)
    h1.Draw()
    outfile1 = ROOT.TFile("./Plots/my_algo.root", "RECREATE")
    h1.Write()
    outfile1.Close()
    
    time_end = time.time()
    
    print(f"Time elapsed: {time_end - time_start:.4f} s")


if __name__ == '__main__':
    main()

